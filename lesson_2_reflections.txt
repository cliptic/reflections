git diff # compares working directory and staging area
git diff --staged # compares the most recent commit with the staged area
git diff commit1index commit2index # compares 2 commits
git checkout master # checks out the last commit, not index needed
git init # starts a git repository
git add filename.txt # adds files to stging area
git commit # commits files from staging area
git commit -a # commits all last changes
git branch # lists all branches
git branch branch-name # makes a new branch
git brach -d branch-name # deletes branch
git checkout branch-name # swith to branch
git git log --graph --oneline master branch-name # draws a graph of commits with 2 branches 
git checkout -b new-branch-name # makes a branch and checks it out
git merge brancho ne branchtwo # merges branch two into branch one
git remote # create and view remotes
git remote add name http://address.git # adds a remote repository (first create an empty repository on github and copy the address)
git remote -v # v stands for verbouse - it will show more information
git push origin master # sends commits to remote repository called "origin" from a local branch called "master"
git pull origin master # receives commits from remote to local repository


----------------------------------------------------------------------------

What happens when you initialize a repository? Why do you need to do it?
	It starts tracking your workflow and saving versions on your file.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	Staging area lets you combine various sets of falies for commits.
	working direcotry can have extra files in it. It s where the changes happen before they are commited
	Repository has all the files that are tracked.

How can you use the staging area to make sure you have one commit per logical
change?
	You  can save every time? that is crazy. but writing the messages in the commit comment is useful.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	When you want experimental changes or different modes of the same project.

How do the diagrams help you visualize the branch structure?
	It hekos to know what changes belongs where.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	The branches  contain all of the changes made in the previous merged branches.
	Deleted files are deleted and added are added.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	When you do merges automatically, you always know what has changed. But it might take a lot of time and it will be prone to error. Automatic merge will make all changes appear in the last version and will notify all of the conflicts. 